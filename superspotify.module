<?php

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use SpotifyWebAPI;

/**
 * Implements hook_help().
 */
function superspotify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
	  case 'help.page.superspotify':
	    return t('
	      <h2>Super Spotify module for Drupal 8</h2>
		  <p>This module allows you to import your saved Spotify
		  Albums into a Drupal 8 content type</p>
		  ');
  }
}

/**
 * Implements hook_theme().
 */
function superspotify_theme($existing, $type, $theme, $path) {
  $variables = array(
    'superspotify' => array(
      'variables' => array(
        'spotify_text' => NULL,  
      ),
      'template' => 'superspotify',
    ),
  );
  return $variables;
}

function superspotify_batch_import($id, $operation_details, $current_album, $api, $context) {

  $context['results'][] = $id;
 
  $artist_info = $api->getArtist($current_album['artist_id']);
  $artist_genres = $artist_info->genres;
  
  superspotify_add_genres($artist_genres);   
  superspotify_save_album($current_album);
  // Optional message displayed under the progressbar.
  $context['message'] = t('Importing Album "@album_name" @details',
    ['@album_name' => $current_album['album_name'], '@details' => $operation_details]
  );
}

function superspotify_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count albums processed.', ['@count' => count($results)]));
    drupal_set_message(t('The final result was "%final"', ['%final' => end($results)]));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}

function superspotify_delete_albums() {
  $uid = \Drupal::currentUser()->id();
  
  $result = \Drupal::entityQuery('node')
    ->condition('type', 'spotify_album')
    ->condition('uid', $uid)
    ->execute();
  entity_delete_multiple('node', $result);
  
  return $result;
}
  
function superspotify_save_album($current_album) {
  if (strlen($current_album['release_date']) == 4) {
    $current_album['release_date'] = $current_album['release_date'].'-01-01';
  }
  $node = \Drupal::entityTypeManager()->getStorage('node')->create(array(
    'type'        => 'spotify_album',
    'title'       => $current_album['album_name'],
    'field_release_date' => [
      $current_album['release_date'],
    ],
    'field_album_url' => $current_album['album_url'],
    'field_artist' => $current_album['artist_name'],
    'field_artist_url' => $current_album['artist_url'],
    'field_artwork_url' => $current_album['artwork_url'],
  ));
  $node->save();
}

function superspotify_add_genres($genres) {
  foreach ($genres as $genre){
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', "super_spotify_genres");
    $query->condition('name', $genre);
    $tids = $query->execute();
    if (empty($tids)) {
      $term = \Drupal\taxonomy\Entity\Term::create([        
        'vid' => 'super_spotify_genres',
        'name' => $genre,
      ]);
      $term->save();
    }
  }
}