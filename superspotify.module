<?php

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use SpotifyWebAPI;

/**
 * Implements hook_help().
 */
function superspotify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
	  case 'help.page.superspotify':
	    return t('
	      <h2>Super Spotify module for Drupal 8</h2>
		  <p>This module allows you to import your saved Spotify
		  Albums into a Drupal 8 content type</p>
		  ');
  }
}

/**
 * Implements hook_theme().
 */
function superspotify_theme($existing, $type, $theme, $path) {
  $variables = array(
    'superspotify' => array(
      'variables' => array(
        'spotify_text' => NULL,  
      ),
      'template' => 'superspotify',
    ),
  );
  return $variables;
}

function superspotify_batch_import($id, $operation_details, &$context) {

  $context['results'][] = $id;
  $myAlbums = '';

	// Default Settings
	$config = \Drupal::config('superspotify.settings');
	$clientid = $config->get('superspotify.clientid');
	$clientsecret = $config->get('superspotify.clientsecret');
	$redirecturi = $config->get('superspotify.redirecturi');

	$session = new SpotifyWebAPI\Session($clientid, $clientsecret, $redirecturi);

	$options = [
		'scope' => [
			'user-library-read',
		],
	];
	$authorizeUrl = $session->getAuthorizeUrl($options);
	$scopes = $session->getScope();
	$api = new SpotifyWebAPI\SpotifyWebAPI();
	session_start();
	if (isset($_SESSION['superspotify_token'])) {
		$api = new SpotifyWebAPI\SpotifyWebAPI();
		$accessToken = $_SESSION['superspotify_token'];
		$api->setAccessToken($accessToken);
		$scopes = $session->getScope();

    if ($id == 0 || $id % 50 == 0) {
      $myAlbums = $api->getMySavedAlbums(array('offset' =>$id, 'limit' => 50));
    }
  }
  else {
		header('Location: ' . $session->getAuthorizeUrl($options));
		die();    
  }
  if ($id >= 50) {
  $offset = ($id % 50);
  }
  else {
    $offset = $id;
  }
  $album_name = $myAlbums->items[$offset]->album->name;
  // Optional message displayed under the progressbar.
  $context['message'] = t('Importing Album "@album_name" @details',
    ['@album_name' => $album_name, '@details' => $operation_details]
  );
}

function superspotify_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count albums processed.', ['@count' => count($results)]));
    drupal_set_message(t('The final result was "%final"', ['%final' => end($results)]));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}
